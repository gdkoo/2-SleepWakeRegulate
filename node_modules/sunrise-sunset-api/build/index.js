"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSunriseSunsetInfo = exports.MOCK_UNFORMATTED_RESPONSE = exports.MOCK_FORMATTED_RESPONSE = void 0;
const ky_universal_1 = __importDefault(require("ky-universal"));
const camelcase_keys_1 = __importDefault(require("camelcase-keys"));
const mocks_1 = require("./mocks");
Object.defineProperty(exports, "MOCK_FORMATTED_RESPONSE", { enumerable: true, get: function () { return mocks_1.MOCK_FORMATTED_RESPONSE; } });
Object.defineProperty(exports, "MOCK_UNFORMATTED_RESPONSE", { enumerable: true, get: function () { return mocks_1.MOCK_UNFORMATTED_RESPONSE; } });
function getSunriseSunsetInfo(options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!options.latitude) {
            throw new Error("Latitude is a required parameter");
        }
        if (!options.longitude) {
            throw new Error("Longitude is a required parameter");
        }
        if (typeof options.latitude !== "number" ||
            !isFinite(options.latitude) ||
            Math.abs(options.latitude) > 90) {
            throw new Error("Latitude must be a number between -90 and 90 (inclusive)");
        }
        if (typeof options.longitude !== "number" ||
            !isFinite(options.longitude) ||
            Math.abs(options.longitude) > 180) {
            throw new Error("Longitude must be a number between -180 and 180 (inclusive)");
        }
        if (typeof options.date !== "undefined" &&
            options.date !== null &&
            typeof options.date !== "string") {
            throw new Error("Invalid date");
        }
        if (options.useMocks) {
            if (typeof options.formatted === "undefined" || options.formatted) {
                return mocks_1.MOCK_FORMATTED_RESPONSE;
            }
            else {
                return mocks_1.MOCK_UNFORMATTED_RESPONSE;
            }
        }
        const response = yield ky_universal_1.default(options.apiUrl || "https://api.sunrise-sunset.org/json", Object.assign({ method: "get", searchParams: Object.assign(Object.assign({ lat: options.latitude, lng: options.longitude }, (typeof options.date === "string" && { date: options.date })), (typeof options.formatted === "boolean" && {
                formatted: options.formatted ? 1 : 0,
            })) }, options.kyOptions));
        const body = yield response.json();
        return camelcase_keys_1.default(body.results);
    });
}
exports.getSunriseSunsetInfo = getSunriseSunsetInfo;
